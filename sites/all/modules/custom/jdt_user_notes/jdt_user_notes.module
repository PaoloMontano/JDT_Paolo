<?php
/**
 * @file
 * Code for JDT User Notes
 */

/**
 * Sets up URL Path for JDT User Notes
 */
function jdt_user_notes_menu() {
  $items['node/%/jdt_user_note_add'] = array(
    'title' => 'New JDT User Notes',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('jdt_user_notes_add_my_form', 1),
    'access arguments' => array('administer jdt_user_notes'),
    'description' => 'My form',
    'file' => 'includes/jdt_user_notes.forms.inc',
    'type' => MENU_LOCAL_TASK,
    'weight' => 1000,
  );
  $items['node/%/jdt_user_note_edit/%'] = array(
    'title' => 'Edit JDT User Notes',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('jdt_user_notes_edit_my_form', 3),
    'access arguments' => array('administer jdt_user_notes'),
    'description' => 'My form',
    'file' => 'includes/jdt_user_notes.forms.inc',
  );
  $items['node/%/jdt_user_note_view'] = array(
    'title' => 'View JDT User Note',
    'page callback' => 'theme',
    'page arguments' => array('jdt_user_notes_view', 1),
    'access arguments' => array('adminster jdt_user_notes'),
    'description' => 'My form',
    'type' => MENU_LOCAL_TASK,
    'weight' => 1001,
  );
  $items['jdt/test'] = array(
    'page callback' => 'jdt_render_link',
    'page arguments' => array('3'),
    'access arguments' => array('administer jdt_user_notes'),
    'file' => 'includes/jdt_user_notes.forms.inc',
  );
  $items['jdt/%/jdt_ajax'] = array(
    'page callback' => 'jdt_link_response',
    'page arguments' => array(1),
    'access arguments' => array('administer jdt_user_notes'),
    'type' => MENU_CALLBACK,
    'file' => 'includes/jdt_user_notes.forms.inc'
  );
  $items['jdt/edit/%/%ctools_js'] = array(
    'page callback' => 'jdt_user_notes_modal_add',
    'page arguments' => array(2, 3),
    'access arguments' => array('administer jdt_user_notes'),
    'file' => 'includes/jdt_user_notes.theme.inc',
    'type' => MENU_CALLBACK,
  );
  return $items;
}

/**
 * Implements hook_theme().
 * @param  Array  $existing An array of existing implementations that may be
 *                          used for override purposes. This is primarily useful
 *                          for themes that may wish to examine existing
 *                          implementations to extract data (such as arguments)
 *                          so that it may properly register its own, higher
 *                          priority implementations.
 * @param  String $type     Whether a theme, module, etc. is being processed.
 *                          This is primarily useful so that themes tell if they
 *                          are the actual theme being called or a parent theme.
 * @param  String $theme    The actual name of theme, module, etc. that is being
 *                          processed.
 * @param  String $path     The directory path of the theme or module, so that
 *                          it doesn't need to be looked up.
 */
function jdt_user_notes_theme($existing, $type, $theme, $path) {
  return array(
    'jdt_user_notes_view' => array(
      'variables' => array(
        'jdt_article_id' => array(),
      ),
      'template' => '/templates/jdt_user_notes_disp',
      'path' => drupal_get_path('module', 'jdt_user_notes'),
      'file' => '/includes/jdt_user_notes.theme.inc',
    ),
  );
}

/**
 * Implements hook_node_view().
 * @param  Node   $node      The node that is being assembled for rendering.
 * @param  String $view_mode View mode for node.
 * @param  String $langcode  The language code used for rendering.
 */
function jdt_user_notes_node_view($node, $view_mode, $langcode) {
  if ($view_mode != 'full') {
    return;
  }
  elseif ($view_mode == 'full') {
    $attributes = array();
    $attributes['attributes'] = array(
      'class' => array('use-ajax'),
    );
    $link = l(
      t('Add a JDT Note'),
      'jdt/edit/' . $node->vid . '/ajax',      
      $attributes
    );
    $node->content['jdt_user_notes_modal_edit'] = array(
      '#markup' => $link,
      '#weight' => 60,
    );
  }
}